import logging
import os
from datetime import datetime
import telebot
from telebot import types
from config import TOKEN
from database import db
from mask_rcnn_processor import MaskRCNNThyroidAnalyzer
import torch
from PIL import Image

bot = telebot.TeleBot(TOKEN)
MODEL_PATH = 'neural_networks/mask_rcnn_model_screen.pth'
processor_mask_rcnn = MaskRCNNThyroidAnalyzer(MODEL_PATH)

os.makedirs('user_scans/original', exist_ok=True)
os.makedirs('user_scans/processed', exist_ok=True)


@bot.message_handler(commands=['start'])
def send_welcome(message):
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.row("–ê–Ω–∞–ª–∏–∑ —Å–Ω–∏–º–∫–∞ (AI) üîç", "–û—Ü–µ–Ω–∫–∞ –ø–æ ACR TI-RADSüìä")
    markup.row("‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")

    try:
        db.execute_query(
            "INSERT INTO users (user_id, username) VALUES (%s, %s) ON DUPLICATE KEY UPDATE username=%s",
            (message.from_user.id, message.from_user.username, message.from_user.username)
        )
    except Exception as e:
        logging.error(f"Error saving user: {e}")

    bot.send_message(
        message.chat.id,
        "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –ø–æ–º–æ–≥—É –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–∏–º–æ–∫ —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã.\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∞–Ω–∞–ª–∏–∑–∞:",
        reply_markup=markup
    )


@bot.message_handler(func=lambda m: m.text == "–ê–Ω–∞–ª–∏–∑ —Å–Ω–∏–º–∫–∞ (AI) üîç")
def request_ai_scan(message):
    bot.send_message(message.chat.id,
                     "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –£–ó–ò —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã –¥–ª—è AI-–∞–Ω–∞–ª–∏–∑–∞. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–Ω–∏–º–æ–∫ —á–µ—Ç–∫–∏–π –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é –æ–±–ª–∞—Å—Ç—å.")


@bot.message_handler(func=lambda m: m.text == "–û—Ü–µ–Ω–∫–∞ –ø–æ ACR TI-RADSüìä")
def request_tirads_scan(message):
    bot.send_message(message.chat.id,
                     "üì§ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –£–ó–ò —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –ø–æ —à–∫–∞–ª–µ ACR TI-RADS. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–Ω–∏–º–æ–∫ —á–µ—Ç–∫–∏–π –∏ –∑–∞—Ö–≤–∞—Ç—ã–≤–∞–µ—Ç –≤—Å—é –æ–±–ª–∞—Å—Ç—å.")


@bot.message_handler(content_types=['photo'])
def handle_photo(message):
    try:
        file_info = bot.get_file(message.photo[-1].file_id)
        downloaded_file = bot.download_file(file_info.file_path)
        file_ext = file_info.file_path.split('.')[-1]
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        original_filename = f"{message.from_user.id}_{timestamp}.{file_ext}"
        original_path = os.path.join('user_scans', 'original', original_filename)

        with open(original_path, 'wb') as new_file:
            new_file.write(downloaded_file)

        analysis_type = 'ai'
        if message.reply_to_message and message.reply_to_message.text.startswith("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ –£–ó–ò"):
            analysis_type = 'ai' if "AI-–∞–Ω–∞–ª–∏–∑–∞" in message.reply_to_message.text else 'ti-rads'

        scan_id = db.execute_query(
            "INSERT INTO scans (user_id, original_filepath, analysis_type) VALUES (%s, %s, %s)",
            (message.from_user.id, original_path, analysis_type)
        )

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é
        result_buffer = processor_mask_rcnn.process_image(original_path)
        if result_buffer is None:
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ")

        processed_filename = f"processed_{original_filename}"
        processed_path = os.path.join('user_scans', 'processed', processed_filename)

        with open(processed_path, 'wb') as f:
            f.write(result_buffer.getvalue())

        db.execute_query(
            "UPDATE scans SET processed_filepath=%s, status='completed' WHERE scan_id=%s",
            (processed_path, scan_id)
        )

        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –±—ã–ª –ª–∏ –Ω–∞–π–¥–µ–Ω Carotis
        found_classes = set()

        img = Image.open(original_path).convert("RGB")
        img_tensor = processor_mask_rcnn._transform(img).unsqueeze(0).to(processor_mask_rcnn.device)

        with torch.no_grad():
            predictions = processor_mask_rcnn.model(img_tensor)[0]

        labels = predictions['labels'].cpu().numpy()
        scores = predictions['scores'].cpu().numpy()
        keep = scores >= 0.5
        detected_labels = labels[keep]

        for label in detected_labels:
            class_name = processor_mask_rcnn.class_names[label]
            found_classes.add(class_name)

        caption = "üß† AI-–∞–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à—ë–Ω\n–ù–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏ –≤—ã–¥–µ–ª–µ–Ω—ã:\n"
        caption += "- üü£ –©–∏—Ç–æ–≤–∏–¥–Ω–∞—è –∂–µ–ª–µ–∑–∞\n"

        if 'Carotis' in found_classes:
            caption += "- üü¢ –°–æ–Ω–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è\n"

        with open(processed_path, 'rb') as photo:
            bot.send_photo(message.chat.id, photo, caption=caption.strip())

        markup_rate = types.InlineKeyboardMarkup(row_width=5)
        markup_rate.add(
            types.InlineKeyboardButton("1", callback_data=f"rate_{scan_id}_1"),
            types.InlineKeyboardButton("2", callback_data=f"rate_{scan_id}_2"),
            types.InlineKeyboardButton("3", callback_data=f"rate_{scan_id}_3"),
            types.InlineKeyboardButton("4", callback_data=f"rate_{scan_id}_4"),
            types.InlineKeyboardButton("5", callback_data=f"rate_{scan_id}_5")
        )
        bot.send_message(
            message.chat.id,
            "‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ ‚≠êÔ∏è",
            reply_markup=markup_rate
        )

    except Exception as e:
        logging.error(f"Error processing photo: {e}")
        bot.reply_to(message, "‚ö† –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


@bot.message_handler(func=lambda m: m.text == "‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞")
def send_help(message):
    help_text = (
        "üìå *–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç –±–æ—Ç?*\n"
        "1. –í—ã –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç–µ —Ñ–æ—Ç–æ –£–ó–ò —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã.\n"
        "2. –ë–æ—Ç –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å –ø–æ–º–æ—â—å—é –ò–ò –∏–ª–∏ –ø–æ —à–∫–∞–ª–µ ACR TI-RADS.\n"
        "3. –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–µ–π.\n\n"
        "üîç *AI-–∞–Ω–∞–ª–∏–∑* –∏—Å–ø–æ–ª—å–∑—É–µ—Ç –º–æ–¥–µ–ª—å Mask R-CNN –¥–ª—è –≤—ã–¥–µ–ª–µ–Ω–∏—è —Ç–∫–∞–Ω–µ–π.\n"
        "üìä *ACR TI-RADS* ‚Äî —Å–∏—Å—Ç–µ–º–∞ –æ—Ü–µ–Ω–∫–∏ —Ä–∏—Å–∫–∞ –∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏.\n"
        "üü¢ –ó–µ–ª—ë–Ω—ã–º —Ü–≤–µ—Ç–æ–º –æ—Ç–º–µ—á–µ–Ω–∞ —Å–æ–Ω–Ω–∞—è –∞—Ä—Ç–µ—Ä–∏—è, –µ—Å–ª–∏ –æ–Ω–∞ –±—ã–ª–∞ –Ω–∞–π–¥–µ–Ω–∞.\n"
        "üü£ –§–∏–æ–ª–µ—Ç–æ–≤—ã–º ‚Äî —Ç–∫–∞–Ω—å —â–∏—Ç–æ–≤–∏–¥–Ω–æ–π –∂–µ–ª–µ–∑—ã."
    )
    bot.send_message(message.chat.id, help_text, parse_mode="Markdown")


@bot.callback_query_handler(func=lambda call: call.data.startswith('rate_'))
def handle_rating(call):
    try:
        _, scan_id, rating = call.data.split('_')
        rating = int(rating)
        if not 1 <= rating <= 5:
            raise ValueError("–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–∞—è –æ—Ü–µ–Ω–∫–∞")

        scan = db.fetch_one("SELECT analysis_type FROM scans WHERE scan_id = %s", (scan_id,))
        if not scan:
            raise Exception("Scan not found")
        analysis_type = scan['analysis_type']

        db.execute_query(
            "UPDATE scans SET user_rating=%s WHERE scan_id=%s",
            (rating, scan_id)
        )

        bot.edit_message_text(
            "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ü–µ–Ω–∫—É! –í–∞—à–µ –º–Ω–µ–Ω–∏–µ –ø–æ–º–æ–∂–µ—Ç —É–ª—É—á—à–∏—Ç—å —Å–µ—Ä–≤–∏—Å ‚ò∫Ô∏è",
            call.message.chat.id,
            call.message.message_id
        )

        if analysis_type == 'ai':
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
            markup.add(types.KeyboardButton("–î–∞"), types.KeyboardButton("–ù–µ—Ç"))
            msg = bot.send_message(
                call.message.chat.id,
                "üîÅ –•–æ—Ç–∏—Ç–µ —Ç–∞–∫–∂–µ –ø—Ä–æ–≤–µ—Å—Ç–∏ –æ—Ü–µ–Ω–∫—É —ç—Ç–æ–≥–æ —Å–Ω–∏–º–∫–∞ –ø–æ —à–∫–∞–ª–µ ACR TI-RADS?",
                reply_markup=markup
            )
            bot.register_next_step_handler(msg, lambda m: handle_tirads_after_ai(m, scan_id))

    except ValueError as e:
        logging.error(f"Invalid rating value: {e}")
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—Ü–µ–Ω–∫–∏")
    except Exception as e:
        logging.error(f"Error saving rating: {e}")
        bot.answer_callback_query(call.id, "‚ö† –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")


def handle_tirads_after_ai(message, scan_id):
    if message.text.lower() == '–¥–∞':
        bot.send_message(message.chat.id, "üîÑ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è ACR TI-RADS –∞–Ω–∞–ª–∏–∑...")
        scan = db.fetch_one("SELECT original_filepath, user_id FROM scans WHERE scan_id = %s", (scan_id,))
        if not scan:
            bot.send_message(message.chat.id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∏—Å—Ö–æ–¥–Ω—ã–π —Å–Ω–∏–º–æ–∫.")
            return

        original_path = scan["original_filepath"]
        user_id = scan["user_id"]
        timestamp = datetime.now().strftime('%Y%m%d_%H%M%S')
        processed_filename = f"tirads_processed_{user_id}_{timestamp}.jpg"
        processed_path = os.path.join('user_scans', 'processed', processed_filename)

        with open(original_path, 'rb') as orig, open(processed_path, 'wb') as proc:
            proc.write(orig.read())

        new_scan_id = db.execute_query(
            "INSERT INTO scans (user_id, original_filepath, processed_filepath, analysis_type, status) "
            "VALUES (%s, %s, %s, %s, 'completed')",
            (user_id, original_path, processed_path, 'tirads')
        )

        result_text = (
            "‚úÖ –ê–Ω–∞–ª–∏–∑ –ø–æ —à–∫–∞–ª–µ ACR TI-RADS:\n"
            "–ö–∞—Ç–µ–≥–æ—Ä–∏—è 4A\n"
            "–†–∏—Å–∫ –∑–ª–æ–∫–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç–∏ ~5-10%\n\n"
            "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ø—Ä–æ–≤–µ—Å—Ç–∏ —Ç–æ–Ω–∫–æ–∏–≥–æ–ª—å–Ω—É—é –∞—Å–ø–∏—Ä–∞—Ü–∏–æ–Ω–Ω—É—é –±–∏–æ–ø—Å–∏—é."
        )
        bot.send_message(message.chat.id, result_text)

        markup_rate = types.InlineKeyboardMarkup(row_width=5)
        markup_rate.add(
            types.InlineKeyboardButton("1", callback_data=f"rate_{new_scan_id}_1"),
            types.InlineKeyboardButton("2", callback_data=f"rate_{new_scan_id}_2"),
            types.InlineKeyboardButton("3", callback_data=f"rate_{new_scan_id}_3"),
            types.InlineKeyboardButton("4", callback_data=f"rate_{new_scan_id}_4"),
            types.InlineKeyboardButton("5", callback_data=f"rate_{new_scan_id}_5")
        )
        bot.send_message(
            message.chat.id,
            "‚≠êÔ∏è –û—Ü–µ–Ω–∏—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –∞–Ω–∞–ª–∏–∑–∞ ‚≠êÔ∏è",
            reply_markup=markup_rate
        )

    else:
        bot.send_message(message.chat.id, "üëå –•–æ—Ä–æ—à–æ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑.")


if __name__ == '__main__':
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(none_stop=True)
